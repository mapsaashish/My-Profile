# --- Land Pooling QGIS/PyQGIS: Complete Workflow (up to clipped grid with area fields) ---

import processing
import math
from qgis.core import QgsProject, QgsCoordinateReferenceSystem, QgsField
from qgis.PyQt.QtCore import QVariant

# STEP 1: Set CRS to UTM Zone 44N (EPSG:32644) for Tanahun
project = QgsProject.instance()
crs = QgsCoordinateReferenceSystem("EPSG:32644")
project.setCrs(crs)

# STEP 2: Dissolve parcels by ownership ("Name" field in Boundary50)
boundary_layer = QgsProject.instance().mapLayersByName('Boundary50')[0]
params = {
    'INPUT': boundary_layer,
    'FIELD': ['Name'],
    'OUTPUT': 'memory:dissolved'
}
result = processing.run("native:dissolve", params)
dissolved_layer = result['OUTPUT']
dissolved_layer.setName('dissolved')
QgsProject.instance().addMapLayer(dissolved_layer)

# STEP 3: Add area fields (m2, ropani) to dissolved layer
ropani_m2 = 508.72
dissolved_layer.startEditing()
if dissolved_layer.fields().indexFromName('area_m2') == -1:
    dissolved_layer.dataProvider().addAttributes([
        QgsField("area_m2", QVariant.Double),
        QgsField("area_ropani", QVariant.Double)
    ])
    dissolved_layer.updateFields()
area_m2_idx = dissolved_layer.fields().indexFromName('area_m2')
area_ropani_idx = dissolved_layer.fields().indexFromName('area_ropani')
for feat in dissolved_layer.getFeatures():
    area = feat.geometry().area()
    dissolved_layer.changeAttributeValue(feat.id(), area_m2_idx, round(area, 2))
    dissolved_layer.changeAttributeValue(feat.id(), area_ropani_idx, round(area / ropani_m2, 3))
dissolved_layer.commitChanges()

# STEP 4: Create square grid of 2 ropani 1 aana cells covering the boundary extent
# 1 ropani = 16 aana; 2 ropani 1 aana = 33 aana
cell_area = (33 / 16) * ropani_m2  # Area of 2 ropani 1 aana in m2
cell_size = math.sqrt(cell_area)   # Side of square â‰ˆ 32.4 m
extent = boundary_layer.extent()
grid_params = {
    'TYPE': 2,  # Polygon grid
    'EXTENT': f"{extent.xMinimum()},{extent.xMaximum()},{extent.yMinimum()},{extent.yMaximum()}",
    'HSPACING': cell_size,
    'VSPACING': cell_size,
    'CRS': boundary_layer.crs(),
    'OUTPUT': 'memory:full_grid'
}
result = processing.run("qgis:creategrid", grid_params)
grid_layer = result['OUTPUT']
grid_layer.setName('full_grid')
QgsProject.instance().addMapLayer(grid_layer)

# STEP 5: Clip the grid to the study boundary
clip_params = {
    'INPUT': grid_layer,
    'OVERLAY': boundary_layer,
    'OUTPUT': 'memory:clipped_grid'
}
result = processing.run("native:clip", clip_params)
clipped_grid = result['OUTPUT']
clipped_grid.setName('clipped_grid')
QgsProject.instance().addMapLayer(clipped_grid)

# STEP 6: Add area fields (m2, ropani, aana) to clipped grid
aana_m2 = 31.8  # 1 aana in m2
clipped_grid.startEditing()
if clipped_grid.fields().indexFromName('area_m2') == -1:
    clipped_grid.dataProvider().addAttributes([
        QgsField("area_m2", QVariant.Double),
        QgsField("ropani", QVariant.Int),
        QgsField("aana", QVariant.Double)
    ])
    clipped_grid.updateFields()
area_idx = clipped_grid.fields().indexFromName('area_m2')
ropani_idx = clipped_grid.fields().indexFromName('ropani')
aana_idx = clipped_grid.fields().indexFromName('aana')
for feat in clipped_grid.getFeatures():
    area = feat.geometry().area()
    n_ropani = int(area // ropani_m2)
    n_aana = round((area - n_ropani * ropani_m2) / aana_m2, 2)
    clipped_grid.changeAttributeValue(feat.id(), area_idx, round(area, 2))
    clipped_grid.changeAttributeValue(feat.id(), ropani_idx, n_ropani)
    clipped_grid.changeAttributeValue(feat.id(), aana_idx, n_aana)
clipped_grid.commitChanges()

print("Done! You now have:")
print("- dissolved: owner parcels")
print("- full_grid: grid covering boundary extent")
print("- clipped_grid: grid cells clipped to your area, each with area (m2, ropani, aana)")
